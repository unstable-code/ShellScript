#!/usr/bin/env bash

PAGE_SIZE=${PAGE_SIZE:-25}

use_local_versions=/dev/null
extract_versions_only=0
use_all_tags=0
target_version_tag=
auto_restart_enabled=no

if [ "$1" == "--help" -o "$1" == "help" ]; then
    echo "usage: $0 [--all-tags [--page-size=25]] [--target-url=http] [--extract | [--version=0.0.0] [FILE]]"

    echo -e '\n\e[0;1mOPTIONS\e[m'
    echo -e "--help\t\t\tshow this help."
    echo -e "--extract\t\tdownload gitlab-ce released tags file. (aka. export)"
    echo -e "\t\t\ttags file will be saved to /tmp/gitlab-released-tags.txt"
    echo -e "--all-tags\t\tparsing all supported in Docker Hub instead of GitLab upgrade-path site."
    echo -e "--version=0.0.0\t\tusing provided tags instead of latest tag."
    echo -e "--target-url=http\tA simple connection test for your GitLab server."
    echo -e "--page-size=25\t\thow many spolling amount each page with --all-tags flags."
    echo -e "FILE\t\t\tusing provided file with already ASC sorted contents"

    echo -e '\n\e[0;1mENV VALUES\e[m'
    echo -e "TARGET_URL\t\tsame as --target-url flags"
    echo -e "PAGE_SIZE=25\t\tsame as --page-size flags"
    exit 0
else
    params=("${@}")
    for i in "${!params[@]}"; do
        if [[ "${params[$i]}" == "-"* ]]; then
            if [ "${params[$i]}" == "--all-tags" ]; then
                use_all_tags=1
            elif [ "${params[$i]}" == "--extract" -o "${params[$i]}" == "--export" ]; then
                if [ "$use_local_versions" == '/dev/null' -a -z "$target_version_tag" ]; then
                    extract_versions_only=1
                fi
            elif [[ "${params[$i]}" == "--version"* ]]; then
                target_version_tag=$(echo "${params[$i]}" | awk -F '=' '{ print $2 }')
                if [ $(echo $target_version_tag | grep -c '\-ce') -ne 1 ]; then
                    target_version_tag="$target_version_tag-ce.0"
                fi
                curl -sf https://hub.docker.com/layers/gitlab/gitlab-ce/$target_version_tag &> /dev/null
                if [ $? -eq 0 ]; then
                    echo "using $target_version_tag instead of latest"
                    extract_versions_only=0
                else
                    echo 'error: no such $target_version_tag tags in Docker Hub. using alternative tag: latest' >&2
                    target_version_tag=
                fi
            elif [[ "${params[$i]}" == "--target-url"* ]]; then
                temp=$(echo "${params[$i]}" | awk -F '=' '{ print $2 }')
                if [ -n "$TARGET_URL" ]; then
                    echo "warn: overrided TARGET_URL from $TARGET_URL to $temp"
                fi
                TARGET_URL=$temp
            elif [[ "${params[$i]}" == "--page-size"* ]]; then
                temp=$(echo "${params[$i]}" | awk -F '=' '{ print $2 }')
                if [ -n "$PAGE_SIZE" ]; then
                    echo "warn: overrided PAGE_SIZE from $PAGE_SIZE to $temp"
                fi
                PAGE_SIZE=$temp
            fi
        elif [ -f "${params[$i]}" ] && [ "$use_local_versions" == '/dev/null' -a $extract_versions_only -eq 0 ]; then
            echo "using ${params[$i]} file to take effect reducing time about sorting version tags"
            cat -A "${params[$i]}" | tail -n1 | grep '\$' &> /dev/null
            if [ $? -ne 0 ]; then
                echo '' >> "${params[$i]}"
            fi

            cat "${params[$i]}" | grep -viE '(rc|nightly|latest)' | tee "${params[$i]}" > /dev/null
            requirements=$(cat "${params[$i]}" | grep -cE '^[0-9]+\.[0-9]+\.[0-9]+-ce\.[0-9]+$')
            total=$(cat "${params[$i]}" | wc -l)
            if [ $requirements -ne $total ]; then
                echo "error: provided file contents does not containing gitlab-ce version tags" >&2
                cat "${params[$i]}" | head -n 10 >&2
                exit 1
            else
                use_local_versions=${params[$i]}
            fi
        fi
    done
fi

which docker &> /dev/null
if [ $? -ne 0 ]; then
    echo "This system did not installed docker yet. $(uname -a)" >&2
    echo 'Please install docker or Container Manager before running this script.' >&2
    echo -e '\nref:\n\thttps://docs.docker.com/engine/install/\n\thttps://www.synology.com/dsm/feature/container-manager' >&2
    exit 1
fi

id | grep docker &> /dev/null
if [ $? -ne 0 -a $UID -ne 0 ]; then
    echo "the $USER user does not have enough docker.sock permission." >&2
    exit 1
fi

if [ $(docker ps -a | grep -c gitlab) -eq 0 ]; then
    echo 'error: gitlab/gitlab-ce container does not exist.' >&2
    exit 1
fi

# --------------------------
# 1️⃣ 볼륨 마운트 추출
# --------------------------
VOLUMES=$(docker inspect gitlab --format='{{range .Mounts}}{{.Source}}:{{.Destination}} {{end}}' \
    | tr ' ' '\n' \
    | sed '/^$/d' \
    | awk '{printf "-v %s ", $0}' \
    | sed 's/ $//')

# --------------------------
# 2️⃣ 포트 매핑 추출
# --------------------------
PORTS=$(docker inspect gitlab --format='{{range $p, $conf := .HostConfig.PortBindings}}{{$p}}:{{(index $conf 0).HostPort}} {{end}}' \
    | tr ' ' '\n' \
    | sed '/^$/d' \
    | sed 's/\/tcp//g' \
    | awk -F: '{printf "-p %s:%s ", $2, $1}')

print_stacktrace_errors() {
    if [ $(docker inspect --format='{{.State.ExitCode}}' gitlab) -ne 0 ]; then
        echo -e "\nerror: gitlab container was died with following status code: $(docker inspect --format='{{.State.ExitCode}}' gitlab)" >&2

        if [ $# -eq 2 ]; then
            echo "An error occurred while installing $1. will trying to rollback with following previous version: $2."

            docker ps | grep gitlab &> /dev/null
            if [ $? -eq 0 ]; then
                echo -n "stopping $1 container with SIGINT signal..."
                docker stop gitlab &> /dev/null
                echo ' done'
            fi
            echo -n "removing $1 container..."
            docker container rm gitlab &> /dev/null
            echo ' done'

            echo -n "removing previous $1 image..."
            docker image rm $(docker images | grep gitlab/gitlab-ce | awk '{ print $3 }') &> /dev/null
            echo ' done'

            docker pull gitlab/gitlab-ce:$2
            docker run -d --name gitlab $VOLUMES $PORTS gitlab/gitlab-ce:$2

            echo -n "waiting until gitlab/gitlab-ce:$2 server to boot... "
            spinner='/-\|'
            n=${#spinner}
            echo -n ' '
            while [ $(curl -sf -o /dev/null $TARGET_URL/explore/projects -w "%{http_code}\n") != '200' ]; do
                printf '\b%s' "${spinner:i++%n:1}"
                print_stacktrace_errors
                sleep 1
            done
            printf '\b\b%s' " "
            echo 'done'

            echo -n "waiting until gitlab/gitlab-ce:$2 container is ready... "
            spinner='/-\|'
            n=${#spinner}
            echo -n ' '
            while [ $(docker inspect --format='{{.State.Health.Status}}' gitlab | grep -v unhealthy | grep -c healthy) -ne 1 ]; do
                printf '\b%s' "${spinner:i++%n:1}"
                print_stacktrace_errors
                sleep 1
            done
            printf '\b\b%s' " "
            echo 'done'

            docker exec gitlab gitlab-ctl status
            if [ $? -eq 0 ]; then
                docker exec gitlab gitlab-ctl reconfigure
                docker exec gitlab gitlab-ctl pg-upgrade
                docker exec gitlab gitlab-rake db:migrate
                docker exec gitlab gitlab-ctl restart
            else
                print_stacktrace_errors
            fi
            echo "Successfully downgraded Gitlab server from $1 to $2"
            echo 'please re-run this script to continue upgrade process. (recommends --all-tags flag enable)'
        else
            docker logs gitlab | $PAGER
            docker run --rm -it --name gitlab-debug $VOLUMES $PORTS --entrypoint /bin/bash gitlab/gitlab-ce:$(docker container ls -a | grep gitlab | awk '{ print $2 }' | awk -F ':' '{ print $2 }')

            echo 'please re-run this script to continue upgrade process.'
        fi
        exit 1
    fi
}

if [ $(docker ps | grep -c gitlab) -eq 0 ]; then
    echo -n 'waiting until GitLab server is back to online... '
    docker start gitlab > /dev/null
    spinner='/-\|'
    n=${#spinner}
    echo -n ' '
    while [ $(docker inspect --format='{{.State.Health.Status}}' gitlab | grep -v unhealthy | grep -c healthy) -ne 1 ]; do
        printf '\b%s' "${spinner:i++%n:1}"
        print_stacktrace_errors
        sleep 1
    done
    printf '\b\b%s' " "
    echo 'done'
fi

CURRENT_VERSION=$(docker exec gitlab dpkg -l | grep gitlab | awk '{ print $3 }')
if [ -z "$CURRENT_VERSION" ]; then
    exit 1
fi

start_time=$SECONDS

draw_progress() {
    local current=$1
    local total=$2
    local bar_length=30
    local prefix=$3
    local item_name=$4

    # 진행률 계산
    local progress=$(( current * 100 / total ))

    # 채워진 길이 계산
    local filled=$(( progress * bar_length / 100 ))
    local empty=$(( bar_length - filled ))

    # 바 만들기
    local bar=$(printf "%0.s=" $(seq 1 $filled))
    local spaces=$(printf "%0.s " $(seq 1 $empty))

    # 경과 시간
    local elapsed=$(( SECONDS - start_time ))

    # ETA 계산 (index > 0일 때만)
    local eta=$(( elapsed * (total - current) / current ))

    # ETA를 HH:MM:SS로 변환
    local h=$(( eta / 3600 ))
    local m=$(( (eta % 3600) / 60 ))
    local s=$(( eta % 60 ))

    # 출력
    printf "\r%s: [%s>%s] %d%% (%s %d/%d) ETA %02d:%02d:%02d" \
        "$prefix" "$bar" "$spaces" "$progress" "$item_name" "$current" "$total" $h $m $s

    # 마지막이면 줄바꿈
    if (( current == total )); then
        echo ""
    fi
}

if [ "$use_local_versions" == '/dev/null' ]; then
    if [ $use_all_tags -eq 0 ]; then
        TAGS_URL="https://gitlab-com.gitlab.io/support/toolbox/upgrade-path/path.json"

        echo "Processing GitLab-CE container tags... location: $TAGS_URL"
        ALL_TAGS=()
        if [ -z "$target_version_tag" ]; then
            ALL_TAGS=($(curl -sf $TAGS_URL | jq -r '.all | unique[]' | sort -V | sed 's/$/-ce.0/g'))
        else
            TAGS=($(curl -sf $TAGS_URL | jq -r '.all[]' | sed 's/$/-ce.0/g'))
            CUSTOM_TAGS=("$target_version_tag")
            ALL_TAGS=($(printf "%s\n" "${TAGS[@]}" "${CUSTOM_TAGS[@]}" | sort -Vu))
        fi

        if [ $extract_versions_only -eq 1 ]; then
            echo "${ALL_TAGS[@]}" | tr ' ' '\n' > /tmp/gitlab-released-tags.txt
            if [ $(cat /tmp/gitlab-released-tags.txt | wc -l) -gt 3 ]; then
                echo -e '\nnote: successfully export gitlab-ce released tags. please sort ASC order these tags. location: /tmp/gitlab-released-tags.txt'
                exit 0
            else
                echo -e '\nerror: failed to export gitlab-ce released tags. internal error occurred.' >&2
                rm /tmp/gitlab-released-tags.txt &> /dev/null
                exit 1
            fi
        fi
    else
        TAGS_URL="https://hub.docker.com/v2/repositories/gitlab/gitlab-ce/tags/?page_size=$PAGE_SIZE"

        # 1. 첫 페이지 요청
        RESPONSE=$(curl -sL "$TAGS_URL")
        TOTAL_COUNT=$(echo "$RESPONSE" | jq '.count')

        # 2. 전체 페이지 수 계산
        TOTAL_PAGES=$(( (TOTAL_COUNT + PAGE_SIZE - 1) / PAGE_SIZE ))

        ALL_TAGS=()

        echo "Spolling GitLab-CE container tags... location: $TAGS_URL"
        while [ -n "$TAGS_URL" ]; do
            RESPONSE=$(curl -sL "$TAGS_URL")
            TAGS=$(echo "$RESPONSE" | jq -r '.results[].name')
            if [ -z "$TAGS" ]; then
                break  # 더 이상 태그 없음
            else
                CURRENT_PAGE=$(echo "$TAGS_URL" | grep -oP 'page=\K[0-9]+' || echo 1)
                draw_progress $CURRENT_PAGE $TOTAL_PAGES 'Querying GitLab Releases' 'Page'
            fi
            ALL_TAGS+=($TAGS)
            TAGS_URL=$(echo "$RESPONSE" | jq -r '.next')
        done

        echo -e "\nSorting ASC GitLab-CE released tags..."

        # 버전 정렬
        printf '%s\n' "${ALL_TAGS[@]}" > /tmp/gitlab-parsed.log
        cat /tmp/gitlab-parsed.log | tr ' ' '\n' | tee /tmp/gitlab-parsed.log > /dev/null

        RAW_TAGS_N=$(cat /tmp/gitlab-parsed.log | sort -V | grep -viE '(rc|nightly|latest)')
        count=1
        mapfile -t RAW_TAGS <<< "$RAW_TAGS_N"

        ALL_TAGS=()
        for idx in "${!RAW_TAGS[@]}"; do
            tag="${RAW_TAGS[$idx]}"
            if [ $extract_versions_only -eq 1 ]; then
                draw_progress $count ${#RAW_TAGS[@]} "Exporting provided contents" 'Item'
            else
                draw_progress $count ${#RAW_TAGS[@]} "Including provided contents" 'Item'
            fi

            # 배열에 추가
            ALL_TAGS+=("$tag")
            count=$((count + 1))

            # 첫 번째 비교
            if [ $((idx + 1)) -lt ${#RAW_TAGS[@]} ]; then
                next_tag="${RAW_TAGS[$((idx + 1))]}"
                first=$(printf '%s\n%s\n' "$tag" "$next_tag" | sort -V | head -n1)
                if ! [[ "$first" == "$tag" ]]; then
                    echo -e "\nerror: tags are NOT in ASC order: $tag > $next_tag" >&2
                    exit 1
                fi
            fi
        done
        rm /tmp/gitlab-parsed.log 2> /dev/null
        if [ $extract_versions_only -eq 1 ]; then
            echo "${ALL_TAGS[@]}" | tr ' ' '\n' > /tmp/gitlab-released-tags.txt
            if [ $(cat /tmp/gitlab-released-tags.txt | wc -l) -gt 3 ]; then
                echo -e '\nnote: successfully export gitlab-ce released tags. please sort ASC order these tags. location: /tmp/gitlab-released-tags.txt'
                exit 0
            else
                echo -e '\nerror: failed to export gitlab-ce released tags. internal error occurred.' >&2
                rm /tmp/gitlab-released-tags.txt &> /dev/null
                exit 1
            fi
        fi
    fi
else
    cat "$use_local_versions" | tr ' ' '\n' | tee "$use_local_versions" > /dev/null
    RAW_TAGS_N=$(cat "$use_local_versions" | sort -V | grep -viE '(rc|nightly|latest)')
    count=1
    mapfile -t RAW_TAGS <<< "$RAW_TAGS_N"

    if [ -n "$target_version_tag" ]; then
        CUSTOM_TAGS=("$target_version_tag")
        RAW_TAGS=($(printf "%s\n" "${RAW_TAGS[@]}" "${CUSTOM_TAGS[@]}" | sort -Vu))
    fi

    for idx in "${!RAW_TAGS[@]}"; do
        tag="${RAW_TAGS[$idx]}"
        draw_progress $count ${#RAW_TAGS[@]} "Verifying provided contents" 'Item'

        # 배열에 추가
        ALL_TAGS+=("$tag")
        count=$((count + 1))

        # 첫 번째 비교
        if [ $((idx + 1)) -lt ${#RAW_TAGS[@]} ]; then
            next_tag="${RAW_TAGS[$((idx + 1))]}"
            first=$(printf '%s\n%s\n' "$tag" "$next_tag" | sort -V | head -n1)
            if ! [[ "$first" == "$tag" ]]; then
                echo -e "\nerror: tags are NOT in ASC order: $tag > $next_tag" >&2
                exit 1
            fi
        fi
    done
fi

# 1. 현재 버전 이후만 필터링
UPDATABLE_TAGS=()

count=1
for idx in "${!ALL_TAGS[@]}"; do
    tag="${ALL_TAGS[$idx]}"
    draw_progress $count ${#ALL_TAGS[@]} "Listing tags after $CURRENT_VERSION" 'Item'

    # 현재 버전보다 최신이면 배열에 추가
    if [[ "$(printf '%s\n%s\n' "$CURRENT_VERSION" "$tag" | sort -V | head -n1)" != "$tag" ]]; then
        UPDATABLE_TAGS+=("$tag")
    fi
    count=$((count + 1))
done

if [ -n "$target_version_tag" ]; then
    TEMP=()
    count=1
    for idx in "${!UPDATABLE_TAGS[@]}"; do
        tag="${UPDATABLE_TAGS[$idx]}"
        draw_progress $count ${#UPDATABLE_TAGS[@]} "Listing tags before $target_version_tag" 'Item'

        # 대상 버전보다 최신이면 배열에 미포함
        if [[ "$(printf '%s\n%s\n' "$tag" "$target_version_tag" | sort -V | head -n1)" == "$tag" ]]; then
            TEMP+=("$tag")
        fi
        count=$((count + 1))
    done

    UPDATABLE_TAGS=("${TEMP[@]}")
fi

# 2. 마이너 릴리즈별 첫/최신 버전 선택
declare -A MINOR_FIRST
declare -A MINOR_LATEST
count=1
for idx in "${!UPDATABLE_TAGS[@]}"; do
    tag="${UPDATABLE_TAGS[$idx]}"
    minor=$(echo "$tag" | cut -d. -f1,2)
    draw_progress $count ${#UPDATABLE_TAGS[@]} "Creating Upgrade Path" 'Item'
    # 첫 번째 발견 시 저장
    if [[ -z "${MINOR_FIRST[$minor]}" ]]; then
        MINOR_FIRST[$minor]="$tag"
    fi
    # 최신 버전 비교
    if [[ -z "${MINOR_LATEST[$minor]}" ]] || [[ "$(printf '%s\n%s\n' "${MINOR_LATEST[$minor]}" "$tag" | sort -V | tail -n1)" == "$tag" ]]; then
        MINOR_LATEST[$minor]="$tag"
    fi
    count=$((count + 1))
done

# 결과 확인
mapfile -t UPGRADE_POINTS_ARRAY < <(
    for minor in $(printf '%s\n' "${!MINOR_FIRST[@]}" | sort -V); do
        echo "${MINOR_FIRST[$minor]}"
        if [[ "${MINOR_FIRST[$minor]}" != "${MINOR_LATEST[$minor]}" ]]; then
            echo "${MINOR_LATEST[$minor]}"
        fi
    done
)

if [ -z "$TARGET_URL" ]; then
    echo 'TARGET_URL does not configured yet. please enter your GitLab server URL.'
    echo 'ex: https://gitlab.com'
    echo -n '> '
    TARGET_URL=$(read n && echo $n)
    if [ -z "$TARGET_URL" ]; then
        echo 'User abort'
        exit 1
    fi
fi

if [ ${#UPGRADE_POINTS_ARRAY[@]} -eq 0 ]; then
    echo "requirements already satisfied: v$CURRENT_VERSION"

    curl -sf -o /dev/null $TARGET_URL/explore/projects &> /dev/null
    if [ $? -ne 0 ]; then
        echo "NOTE: If your GitLab server does not work properly, please edit $(docker inspect gitlab --format='{{range .Mounts}}{{.Source}}:{{.Destination}} {{end}}' | tr ' ' '\n' | grep /etc/gitlab | awk -F ':' '{ print $1 }')/gitlab.rb file or 'docker exec -it gitlab /bin/bash && vi /etc/gitlab/gitlab.rb'"
    fi
    exit 0
fi

echo -e "\nWould you like to upgrade GitLab server from $CURRENT_VERSION to ${UPGRADE_POINTS_ARRAY[-1]}?"
echo "This action can not be undo. PLEASE BACKUP gitlab drive BEFORE STARTING UPDATE..."
echo "You should update pointing release either. ROUTING COUNT: ${#UPGRADE_POINTS_ARRAY[@]}"
if [ ${#UPGRADE_POINTS_ARRAY[@]} -le 5 ]; then
    echo -e "\ttraceroute: ${UPGRADE_POINTS_ARRAY[@]}"
fi
if [ $use_all_tags -eq 0 ]; then
    echo "Follow this link to get more infomations: https://gitlab-com.gitlab.io/support/toolbox/upgrade-path/?current=$(echo $CURRENT_VERSION | sed 's/-ce.0//')&target=$(echo ${UPGRADE_POINTS_ARRAY[-1]} | sed 's/-ce.0//')&distro=docker"
fi
echo ''
echo -e "\t1. I understood which this action DID NOT SUPPORTed rollback"
echo -e "\t2. I understood which this action did not end shortly cuz ROUTING COUNT reason."
echo -e "\t3. I checked container restart policy: $(docker inspect --format='{{.HostConfig.RestartPolicy.Name}}' gitlab)"
echo -e "\t4. I checked container PORTS: $(docker ps --format='{{.Names}} {{.Ports}}' | grep gitlab | sed 's/gitlab //')"
echo -e "\t5. I checked container DRIVE: $(docker inspect gitlab --format='{{range .Mounts}}{{.Source}}:{{.Destination}} {{end}}')"
if [ $use_all_tags -eq 0 ]; then
    echo -e "\t6. I checked TARGET_URL is valid: $TARGET_URL"
else
    echo -e "\t6. I checked PAGE_SIZE and TARGET_URL values: PAGE_SIZE: $PAGE_SIZE, TARGET_URL: $TARGET_URL"
fi

echo -en "\nI accepted above notice and continue this job (y/N) > "
read n
if ! [ "$n" == "y" -o "$n" == "Y" ]; then
    echo 'User abort' >&2
    exit 1
fi

auto_restart_enabled=$(docker inspect --format='{{.HostConfig.RestartPolicy.Name}}' gitlab)

index=1
CNT_VERSION=$CURRENT_VERSION
for ver in "${UPGRADE_POINTS_ARRAY[@]}"; do
    echo "updating $CNT_VERSION to $ver... ($index/${#UPGRADE_POINTS_ARRAY[@]})"
    docker ps | grep gitlab &> /dev/null
    if [ $? -ne 0 ]; then
        docker start gitlab &> /dev/null
        echo -n "waiting until gitlab/gitlab-ce:$CNT_VERSION container is ready..."
        spinner='/-\|'
        n=${#spinner}
        echo -n ' '
        while [ $(docker inspect --format='{{.State.Health.Status}}' gitlab | grep -v unhealthy | grep -c healthy) -ne 1 ]; do
            printf '\b%s' "${spinner:i++%n:1}"
            print_stacktrace_errors
            sleep 1
        done
        printf '\b\b%s' " "
        echo 'done'
    fi

    docker exec gitlab gitlab-ctl status
    if [ $? -eq 0 ]; then
        docker exec gitlab gitlab-ctl reconfigure
        docker exec gitlab gitlab-ctl pg-upgrade
        docker exec gitlab gitlab-rake db:migrate
    else
        print_stacktrace_errors
    fi

    docker ps | grep gitlab &> /dev/null
    if [ $? -eq 0 ]; then
        echo -n "stopping $CNT_VERSION container with SIGINT signal..."
        docker stop gitlab &> /dev/null
        echo ' done'
    fi
    echo -n "removing $CNT_VERSION container..."
    docker container rm gitlab &> /dev/null
    echo ' done'

    echo -n "removing previous $CNT_VERSION image..."
    docker image rm $(docker images | grep gitlab/gitlab-ce | awk '{ print $3 }') &> /dev/null
    echo ' done'

    docker pull gitlab/gitlab-ce:$ver
    docker run -d --name gitlab $VOLUMES $PORTS gitlab/gitlab-ce:$ver

    echo -n "waiting until gitlab/gitlab-ce:$ver server to boot... "
    spinner='/-\|'
    n=${#spinner}
    echo -n ' '
    while [ $(curl -sf -o /dev/null $TARGET_URL/explore/projects -w "%{http_code}\n") != '200' ]; do
        printf '\b%s' "${spinner:i++%n:1}"
        print_stacktrace_errors $ver $CNT_VERSION
        sleep 1
    done
    printf '\b\b%s' " "
    echo 'done'

    echo -n "waiting until gitlab/gitlab-ce:$ver container is ready... "
    spinner='/-\|'
    n=${#spinner}
    echo -n ' '
    while [ $(docker inspect --format='{{.State.Health.Status}}' gitlab | grep -v unhealthy | grep -c healthy) -ne 1 ]; do
        printf '\b%s' "${spinner:i++%n:1}"
        print_stacktrace_errors $ver $CNT_VERSION
        sleep 1
    done
    printf '\b\b%s' " "
    echo 'done'

    if [ $index -lt ${#UPGRADE_POINTS_ARRAY[@]} ]; then
        echo "gitlab-ce $ver update completed. remaining jobs: $((${#UPGRADE_POINTS_ARRAY[@]} - index - 1))"
    else
        echo "gitlab-ce $ver update completed."
    fi
    CNT_VERSION=$ver
    index=$((index + 1))
done

docker exec gitlab gitlab-ctl status
if [ $? -eq 0 ]; then
    docker exec gitlab gitlab-ctl reconfigure
    docker exec gitlab gitlab-ctl pg-upgrade
    docker exec gitlab gitlab-rake db:migrate
else
    print_stacktrace_errors
fi

if [ "$auto_restart_enabled" == "$(docker inspect --format='{{.HostConfig.RestartPolicy.Name}}' gitlab)" ] && [ "$auto_restart_enabled" == 'no' ]; then
    echo "would you like to change RestartPolicy from $auto_restart_enabled to always?"
    echo 'AVAILABLE OPTIONS'
    echo -e 'no\t\t\t\tDo not automatically restart the container. (Default, Current)'
    echo -e 'on-failure[:max-retries]\tRestart the container if it exits due to an error, which manifests as a non-zero exit code.'
    echo -e 'always\t\t\t\tAlways restart the container if it stops. If it is manually stopped, it is restarted only when Docker daemon restarts or the container itself is manually restarted. '
    echo -e 'unless-stopped\t\t\tSimilar to always, except that when the container is stopped (manually or otherwise), it is not restarted even after Docker daemon restarts.'
    echo -n '> '
    read n
    case "$n" in
        no|always|unless-stopped|on-failure|on-failure:[0-9]*)
            docker update --restart=$n gitlab
            ;;
        *)
            echo 'If you want to edit RestartPolicy value later, please run `docker update --restart=<rule> gitlab` to apply.'
            ;;
    esac
elif [ "$auto_restart_enabled" != "$(docker inspect --format='{{.HostConfig.RestartPolicy.Name}}' gitlab)" ]; then
    echo "update gitlab RestartPolicy $(docker inspect --format='{{.HostConfig.RestartPolicy.Name}}' gitlab) to $auto_restart_enabled"
    docker update --restart=$auto_restart_enabled gitlab
fi

echo "Successfully updated Gitlab server from $CURRENT_VERSION to ${UPGRADE_POINTS_ARRAY[-1]}"
echo "Updated traceroute: ${UPGRADE_POINTS_ARRAY[@]}"

exit 0
